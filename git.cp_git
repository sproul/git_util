:

Mv_contents()
{
        src="$1"
        dest="$2"

        mv "$dest_dir"/*        "/tmp/$repo_name"
        mv "$dest_dir"/.??*     "/tmp/$repo_name"       > /dev/null 2>&1
        mv "$dest_dir"/.[a-zA-Z0-9]  "/tmp/$repo_name"  > /dev/null 2>&1
}

all_mode=''
dry_mode=''
fast_mode=''
force_mode=''
t=`mktemp`; trap "rm $t" EXIT
verbose_mode=''
while [ -n "$1" ]; do
        case "$1" in
                a|-all)
                        all_mode=-all
                ;;
                -dry)
                        dry_mode=-dry
                ;;
                -fast)
                        fast_mode=-fast
                ;;
                -f|-force)
                        force_mode=-force
                ;;
                -q|-quiet)
                        verbose_mode=''
                ;;
                -v|-verbose)
                        verbose_mode=-v
                ;;
                *)
                        break
                ;;
        esac
        shift
done

dest_dir=`pwd`
repo_name=`basename $dest_dir`
src_dir="$HOME/git/$repo_name"
if [ ! -d $src_dir/.git ]; then
        echo "$0: error: could not find directory \"$src_dir/.git\"" 1>&2
        exit 1
fi
if [ ! -d .git ]; then
        echo "$0 could not find directory \".git\"" 1>&2
        if [ -z "$force_mode" ]; then
                exit 1
        fi
        touch /tmp/Restore_clean_configs__just_return
else
        backup_dir=../$repo_name.git.bak
        echo.clean "rm -rf $backup_dir"
        if ! rm       -rf $backup_dir; then
                echo "$0: rm       -rf $backup_dir failed, exiting..." 1>&2
                exit 1
        fi
        echo.clean "mv .git ../$repo_name.git.bak"
        if ! mv       .git ../$repo_name.git.bak; then
                echo "$0: mv       .git ../$repo_name.git.bak failed, exiting..." 1>&2
                exit 1
        fi
fi
if [ -z "$fast_mode" ]; then
        cd "$src_dir"
        git.d > $t
        if [ -s $t ]; then
                echo "FAIL $src_dir has changes:" 1>&2
                cat $t
                exit 1
        fi
        branch=`git.branch`

        . git.prep_auth.inc
        Prep_auth
        git pull origin $branch
fi
if [ -n "$all_mode" ]; then
        rm -rf /tmp/$repo_name
        echo.clean "mv $dest_dir /tmp"
        if          mv $dest_dir /tmp; then
                echo.clean "cp -pr $src_dir $dest_dir"
                if cp -pr $src_dir $dest_dir; then
                        exit
                else
                        echo "FAIL cp -pr $src_dir $dest_dir, time to clean up"
                        exit 1
                fi
        fi
fi

if ! cp -pr $src_dir/.git $dest_dir; then
        echo "$0: cp -pr $src_dir/.git $dest_dir failed, exiting..." 1>&2
        exit 1
fi
if [ -z "$all_mode" ]; then
        echo "git.d"
        git.d
else
        rm -rf                  "/tmp/$repo_name"
        mkdir                   "/tmp/$repo_name"
        Mv_contents "$dest_dir" "/tmp/$repo_name"
        Mv_contents "$src_dir" "$dest_dir"
fi
exit
cd $dp/monr; bx $dp/git_util/git.cp_git a
cd $dp/bin; bx $dp/git_util/git.cp_git