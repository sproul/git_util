:
# - mv current tree to *.merge_problem
# - make a new, clean tree
# - difr in order to merge to the clean tree

Test()
{
        t2=$HOME/git/t2
        t2a=$HOME/git/t2.a
        t2b=$HOME/git/t2.b
        if [ -d "$t2" ]; then
                echo "$0: tmp test directory t2 already exists at \"$t2\", cannot continue" 1>&2
                exit 1
        fi
        rm -rf $t2a
        rm -rf $t2b

        echo "git.clone git@github.com:sproul/t2.git"
        if !  git.clone git@github.com:sproul/t2.git; then
                echo "$0: git.clone git@github.com:sproul/t2.git failed, exiting..." 1>&2
                exit 1
        fi
        echo.clean "mv $t2 $t2a"
        if !        mv $t2 $t2a; then
                echo "$0: mv $t2 $t2a failed, exiting..." 1>&2
                exit 1
        fi
        echo "git.clone git@github.com:sproul/t2.git"
        if !  git.clone git@github.com:sproul/t2.git; then
                echo "$0: git.clone git@github.com:sproul/t2.git failed, exiting..." 1>&2
                exit 1
        fi
        echo.clean "mv $t2 $t2b"
        if !        mv $t2 $t2b; then
                echo "$0: mv $t2 $t2b failed, exiting..." 1>&2
                exit 1
        fi
        cd $t2b
        echo t2b > newer
        git commit -m "t2b"
        git pull --rebase
        git push origin master
        cd $t2a
        echo t2a > newer
        git commit -m "t2a"
        git pull --rebase
        git push origin master
        echo.clean "mv $t2a $t2"
        if !        mv $t2a $t2; then
                echo "$0: mv $t2a $t2 failed, exiting..." 1>&2
                exit 1
        fi
        cd $t2
        bash -x $0
}

dry_mode=''
verbose_mode=''
while [ -n "$1" ]; do
        case "$1" in
                -dry)
                        dry_mode=-dry
                ;;
                -q|-quiet)
                        verbose_mode=''
                ;;
                -v|-verbose)
                        verbose_mode=-v
                ;;
                -test)
                        echo Will provoke a merge conflict in test repo t2, and then resolve it
                        echo NOt sure if still valid... Test
                        exit
                ;;
                *)
                        break
                ;;
        esac
        shift
done
if [ -n "$1" ]; then
        dir=`full_path $1`
        if [ ! -d "$dir" ]; then
                echo "$0: error: could not find directory \"$dir\"" 1>&2
                exit 1
        fi
else
        dir=`pwd`
fi
project=`basename "$dir"`
clean_git_dir=$HOME/git/$project
if [ ! -d "$clean_git_dir" ]; then
        url=`grep 'url =' $dir/.git/config | sed -e 's/.*url = //'`
        echo I think we need to run:
        echo git.clone $url
        echo "$0: IMPL git.clone to set up initial clean dir in \"$clean_git_dir\"" 1>&2
        exit 1
fi
echo "cd $clean_git_dir"
cd       $clean_git_dir
echo.clean "git.up      # sync to latest"
if ! git.up; then
        echo "$0: git.up failed, exiting..." 1>&2
        exit 1
fi
if ! rm -rf /tmp/.git; then
        echo "$0: rm -rf /tmp/.git failed, exiting..." 1>&2
        exit 1
fi
if ! mv $dir/.git /tmp; then
        echo "$0: mv $dir/.git /tmp failed, exiting..." 1>&2
        exit 1
fi
if ! cp -pr $clean_git_dir/.git $dir; then
        echo "$0: cp -pr $clean_git_dir/.git $dir failed, exiting..." 1>&2
        exit 1
fi
echo.clean "cd $dir"
cd       $dir
echo "git.d"
git.d
exit
cd $dp/git/diagnostic-tool/; bx $dp/git_util/git.merge_into_clean