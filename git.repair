:
# to use when we have a somehow damaged version of a git branch, which may contain valuable changes
#
# This script operates on the assumption that if we just have a fresh and current .git dir, then we can resolve all other difficulties.
# Also it is nice to have the latest versions of stuff handy and ready to be merged in.
proj_dir=$1
if [ -z "$proj_dir" ]; then
        proj_dir=$(pwd)
else
        cd "$proj_dir"
fi
proj=`basename $proj_dir`
new_dir=/tmp/$proj
if [ -d $new_dir ]; then
        echo "$0: error: $new_dir already exists, what is it?" 1>&2
        exit 1
fi
if ! mkdir -p $new_dir; then
        echo "$0: mkdir -p $new_dir failed, exiting..." 1>&2
        exit 1
fi
. git.prep_auth.inc
Prep_auth
url=`grep 'url = ' $proj_dir/.git/config | sed -e 's;^[\t ]*url = ;;'`
if ! cd $new_dir/..; then
        echo "$0: cd $new_dir/.. failed, exiting..." 1>&2
        exit 1
fi
. proxy_configure.sh
if ! git clone "$url"; then
        echo "$0: git clone $url failed, exiting..." 1>&2
        exit 1
fi
backup_dir=/tmp/.git
rm -rf $backup_dir
if ! mv $proj_dir/.git $backup_dir; then
        echo "$0: mv $proj_dir/.git /tmp/.git failed, exiting..." 1>&2
        exit 1
fi
if ! mv "$new_dir/.git" "$proj_dir/.git"; then
        echo "$0: mv $new_dir/.git $proj_dir/.git failed, exiting..." 1>&2
        exit 1
fi
difr $proj_dir $new_dir
exit
proj_dir=$dp/emacs
bx $dp/git_util/git.repair $dp/emacs